#!/bin/bash

set -ex

ROOTDIR=$(cd $(dirname $0)/../ && pwd)
PORTO_VERSION=$(git describe --match "v[0-9]*" --abbrev=7 | sed -e 's/^v//')
PORTO_DPKG="$PWD/../yandex-porto_${PORTO_VERSION}_amd64.deb"
PYTHON_DPKG="$PWD/../python-portopy_${PORTO_VERSION}_all.deb"
SUDO=sudo

update_config() {
	echo "log { verbose: true } network { enabled: $1 dynamic_ifaces: $2 } container { use_hierarchy: true empty_wait_timeout_ms: 1000 } privileges { restricted_root_user: \"daemon\" } volumes { enabled: true }" | $SUDO tee /etc/portod.conf
}

say() { [ ! -t 1 ] || tput setaf 3; echo "$@"; [ ! -t 1 ] || tput sgr0; }
die() { echo $@ ; exit 1; }

getver() { portoctl -v 2>&1 | grep $1 | awk '{print $2}'; }
checkver() { [ "$2" = "$3" ] || { echo "Invalid $1 version ($2 != $3)"; }; }

build() {
	say "Build"
	rm -f "$PORTO_DPKG" "$PYTHON_DPKG"
	dch --newversion $PORTO_VERSION "test build"
	debuild -i -us -uc -b -j$(grep -c "^processor" /proc/cpuinfo)
	install
}

install() {
	say "Install"
	$SUDO dpkg -i "$PORTO_DPKG" #"$PYTHON_DPKG"
	checkver server v$PORTO_VERSION $(getver server)
	checkver client v$PORTO_VERSION $(getver client)
}

selftest() {
	say "Self test"
	update_config true true
	$SUDO portotest "$@"
}

stresstest() {
	say "Stress test"
	update_config true true
	$SUDO portotest stress "$@"
}

fuzzytest() {
	say "Fuzzy test"
	update_config true true
	$SUDO portotest fuzzy "$@"
}

pkgtest() {
	say "Package test"
	mkdir -p /place
	for f in $(find $ROOTDIR/scripts/dist/ -name '*.conf'); do
		img=/place/$(basename $f).img
		$SUDO touch $img
		$SUDO $ROOTDIR/scripts/mkimg 10G $img $f -vTd -c $ROOTDIR
	done
}

threadstest() {
	say "Threads test"
	$SUDO restart yandex-porto
	$SUDO python $ROOTDIR/src/test/threads.py "$@"
	$SUDO NOCHECK=y portotest self daemon
}

HOST=${HOST:-__please_specify_host__}
PORT=8081

IFACES=$(ip l | grep -w ' eth.' | grep -w UP | grep -v NO-CARRIER | awk '{print $2}' | tr -d ':')

# print container tc class details
netdetails() {
	local container="$1"

	local class=$(cat /sys/fs/cgroup/net_cls/porto/$container/net_cls.classid)
	local hi=$(( ($class & 0xFFFF0000) >> 16))
	local lo=$(($class & 0xFFFF))
	local id=$(printf "%x:%x" $hi $lo)

	echo "$hi $lo $id"

	for iface in $IFACES; do
		tc -s class show dev $iface | grep "htb $id" -A4
	done
}

# return number of Mbytes/sec
getrate() {
	local guarantee=$1
	local ceil=$2
	local container="iperf-$guarantee-$ceil"
	local iperf_opts="-V"

	local prop=""
	for iface in $IFACES; do
		[ -z "$guarantee" ] || prop="$prop net_guarantee[$iface]=$guarantee"
		[ -z "$ceil" ] || prop="$prop net_limit[$iface]=$ceil"
	done

	echo portoctl run $container command="iperf $iperf_opts -fk -c $HOST -p $PORT" $prop >&2
	portoctl run $container command="iperf $iperf_opts -fk -c $HOST -p $PORT" $prop
	lsof -i TCP:8081 >&2

	netdetails $container >&2

	portoctl wait $container >/dev/null
	ret=$(portoctl get $container stdout)
	echo "$ret" >&2
	netdetails $container >&2
	portoctl destroy $container
	kbits=$(echo "$ret" | grep '/sec' | awk '{print $7}')
	mbytes=$(($kbits / 1000 / 8))
	echo "kbits=$kbits mbytes=$mbytes" >&2
	echo $mbytes
}

expect() {
	local what=$1
	local min=$2
	local max=$3

	if [ $what -lt $min -o $what -gt $max ]; then
		say "- unexpected $min < $what < $max mbytes/sec"
		exit 1
	else
		say "- rate $min < $what < $max mbytes/sec"
	fi
}

A_OUT=""
B_OUT=""
cleanup() {
	set +e
	[ -z "$A_OUT" ] || rm $A_OUT
	[ -z "$B_OUT" ] || rm $B_OUT
}
trap cleanup EXIT

nettest() {
	# ssh kernel1 iperf -V -s -p 8081

	say "Single container with default limits"
	expect `getrate 1` 90 500

	say "1Mbyte/s ceil"
	expect `getrate 1 $((1 * 1024 * 1024))` 0 2

	local a_g=$((100 * 1024 * 1024))

	say "$a_g guarantee"
	local a_out=$(mktemp)
	local b_out=$(mktemp)

	getrate $a_g > $a_out &
	getrate 1 > $b_out &

	wait
	wait

	a_rate=$(cat $a_out)
	b_rate=$(cat $b_out)
	rm $a_out $b_out

	say "- rate with guarantee $a_rate, without $b_rate"
	if [ $a_rate -lt $b_rate ]; then
		say "- unexpected $a_rate > $b_rate"
		exit 1
	fi

	local a_l=$((1 * 1024 * 1024))
	say "$a_l limit"
	local a_out=$(mktemp)
	local b_out=$(mktemp)

	getrate 1 $a_l > $a_out &
	getrate 1 > $b_out &

	wait
	wait

	a_rate=$(cat $a_out)
	b_rate=$(cat $b_out)
	rm $a_out $b_out

	expect $a_rate 0 2
	expect $b_rate 90 500
}

mvlantest() {
	local iface=eth1
	local container_suffix=50
	local host_suffix=60

	local host_net=$(ip addr show dev $iface | grep -w inet | awk '{print $2}')
	local host_ip=$(echo $host_net | cut -d'/' -f 1)
	local host_mask=$(echo $host_net | cut -d'/' -f 2)
	local container_ip=$(echo $host_ip | sed "s/\([0-9]*\.[0-9]*\.[0-9]*\).*/\1.$container_suffix/")
	local macvlan_ip=$(echo $host_ip | sed "s/\([0-9]*\.[0-9]*\.[0-9]*\).*/\1.$host_suffix/")
	#local macvlan_ip=$host_ip
	local default_gw=$(ip -o route | grep default | awk '{print $3}')

	#ip link del macvlan0 || :
	#ip link add link $iface name macvlan0 type macvlan
	#ip link set dev macvlan0 up
	#ip addr add $macvlan_ip/$host_mask dev macvlan0

	portoctl exec ping command="ping $host_ip" net="macvlan $iface eth0" ip="eth0 $container_ip/$host_mask" default_gw="$default_gw"
}

update() {
	$ROOTDIR/scripts/test_update "$PORTO_DPKG"
}

fixcg() {
	# make current task belongs to root cgroups
	for cg in /sys/fs/cgroup/*; do
		echo $$ | sudo tee $cg/cgroup.procs &>/dev/null;
	done
}

fixcg

compgen -A function | grep -qx "$1" || die "Invalid test $1"
eval "$@"
